<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Liu Chang Notes</title><link>https://liuchang0812.github.io/posts/</link><description>Recent content in Posts on Liu Chang Notes</description><generator>Hugo -- 0.132.1</generator><language>zh-cn</language><lastBuildDate>Thu, 15 Aug 2024 23:34:58 +0800</lastBuildDate><atom:link href="https://liuchang0812.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>并发编程中的状态机</title><link>https://liuchang0812.github.io/posts/tech/leetcode/state-machine-in-concurrency/</link><pubDate>Thu, 15 Aug 2024 23:34:58 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/leetcode/state-machine-in-concurrency/</guid><description>使用状态机思路解决一个并行问题</description></item><item><title>2023 11 读书分享</title><link>https://liuchang0812.github.io/posts/read/2023-11/</link><pubDate>Wed, 29 Nov 2023 20:52:14 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2023-11/</guid><description>最近主要读了《民主的细节》《芯片战争》和新出的《Elon Musk》几本书。《芯片战争》是在飞机上快速翻了一遍。《民主的细节》是因为前段时间《</description></item><item><title>2023 07 读书分享：清代地方政府</title><link>https://liuchang0812.github.io/posts/read/2023-07/</link><pubDate>Mon, 31 Jul 2023 22:11:33 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2023-07/</guid><description>2023 07 读书分享：清代地方政府</description></item><item><title>2023 06 读书分享：被统治的艺术</title><link>https://liuchang0812.github.io/posts/read/2023-06-reading/</link><pubDate>Tue, 04 Jul 2023 11:58:05 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2023-06-reading/</guid><description>强烈推荐，书的排版很好，翻译的也特别好。比较有意思的是前半部分，介绍了明代的世袭军户制度下，人们从想办法减少服役代价，到利用制度来进行套利的</description></item><item><title>2023 05 读书分享：城乡中国、王氏之死</title><link>https://liuchang0812.github.io/posts/read/2023-05/</link><pubDate>Mon, 05 Jun 2023 22:11:33 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2023-05/</guid><description>2305 读书分享</description></item><item><title>2023 04 读书分享：漫长的余生、父母的语言</title><link>https://liuchang0812.github.io/posts/read/2023-04/</link><pubDate>Thu, 04 May 2023 13:09:42 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2023-04/</guid><description>漫长的余生 书名不好，书很不错。这种书名放在面前都可能不会被注意到。 作者希望用宫女王钟儿作为线索，介绍北魏的一段历史。但是实际读起来，感觉意义</description></item><item><title>2023 03 读书分享</title><link>https://liuchang0812.github.io/posts/read/2023-03-reading/</link><pubDate>Wed, 12 Apr 2023 23:43:04 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2023-03-reading/</guid><description>小镇喧嚣：一个乡镇政治运作的演绎与阐释 推荐，华科大教授写的一本书，记录了在小镇调查的一年半期间遇到的事情，主要包括：镇政府如何处理上级检查，</description></item><item><title>2023 02 读书分享</title><link>https://liuchang0812.github.io/posts/read/2023-02-reading/</link><pubDate>Fri, 03 Mar 2023 20:06:29 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2023-02-reading/</guid><description>分享一下最近读的书</description></item><item><title>libco usage</title><link>https://liuchang0812.github.io/posts/tech/os/libco-usage/</link><pubDate>Tue, 06 Sep 2022 21:00:54 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/os/libco-usage/</guid><description>this note shares libco coroutine usage</description></item><item><title>Paxos Algorithm Note</title><link>https://liuchang0812.github.io/posts/tech/os/paxos-note/</link><pubDate>Sun, 26 Jun 2022 20:02:45 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/os/paxos-note/</guid><description>学习 PaxosStore 中的 Paxos 实现。</description></item><item><title>cgroup usage</title><link>https://liuchang0812.github.io/posts/tech/os/cgroup/</link><pubDate>Sun, 26 Jun 2022 19:29:52 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/os/cgroup/</guid><description>cgroup 介绍与使用方法</description></item><item><title>Why Does Conv Need a Mutex</title><link>https://liuchang0812.github.io/posts/tech/os/why-conv-need-a-mutex/</link><pubDate>Thu, 23 Jun 2022 17:29:52 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/os/why-conv-need-a-mutex/</guid><description>为什么信号量还需要一个互斥锁保护？</description></item><item><title>2022 05 读书分享</title><link>https://liuchang0812.github.io/posts/read/2022-05-reading/</link><pubDate>Sat, 04 Jun 2022 21:22:37 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2022-05-reading/</guid><description>介绍 22 年 5 月读的几本书</description></item><item><title>2267. 检查是否有合法括号字符串路径</title><link>https://liuchang0812.github.io/posts/tech/leetcode/2267/</link><pubDate>Wed, 11 May 2022 22:42:51 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/leetcode/2267/</guid><description>记忆化搜索，刚好卡过去 执行用时：1964 ms, 在所有 C++ 提交中击败了 5.08% 的用户 int mem[100][100][100][100]; class Solution { public: // 0 unknow // 1 true // 2 false bool dfs(const vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid, int x1, int y1, int x2, int y2) { if (x1 &amp;gt;= grid.size() || x2 &amp;gt;=</description></item><item><title>2266. 统计打字方案数</title><link>https://liuchang0812.github.io/posts/tech/leetcode/leetcode2266/</link><pubDate>Tue, 10 May 2022 22:21:58 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/leetcode/leetcode2266/</guid><description>爬楼梯的加强版本，分别提前生成三个字母和四个字母的 fib 数组，然后分组统计后相乘。代码如下： class Solution { public: int countTexts(string pressedKeys) { int f1[100005]; int f2[100005]; memset(f1, 0, sizeof f1); memset(f2, 0, sizeof f2); f1[0] = 1; f1[1] = 2;</description></item><item><title>2022 04 读书分享</title><link>https://liuchang0812.github.io/posts/read/2022-04-reading/</link><pubDate>Mon, 09 May 2022 20:06:29 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2022-04-reading/</guid><description>尘劫: 知青畅想曲 一本名字和封面看起来都非常像地摊文学的书，实际上却是“中共党史出版社”出版的关于知青的报告文学，内容包含了大量真实的知青故事</description></item><item><title>golang | error 的内部实现</title><link>https://liuchang0812.github.io/posts/tech/golang/error-impl/</link><pubDate>Sat, 07 May 2022 20:01:06 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/golang/error-impl/</guid><description>Golang error 是一个包含了 Error() string 函数的接口，任何实现了 Error() string 的结构体都可以认为是 error 类型。 // The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error. type error interface { Error() string } 对于简</description></item><item><title>golang | []byte 和 string 的区别与适用场景</title><link>https://liuchang0812.github.io/posts/tech/golang/byte-slice-vs-string/</link><pubDate>Thu, 03 Mar 2022 10:44:06 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/golang/byte-slice-vs-string/</guid><description>[]byte 和 string 有什么区别？类型转换需要拷贝数据吗？如何选择正确的类型？ []byte和string的类型字义非常类似，[]byte 比 string 多一个 cap 成员。s</description></item></channel></rss>