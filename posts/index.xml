<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Liu Chang Blog</title><link>https://liuchang0812.github.io/posts/</link><description>Recent content in Posts on Liu Chang Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 May 2022 20:01:06 +0800</lastBuildDate><atom:link href="https://liuchang0812.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang | error 的内部实现</title><link>https://liuchang0812.github.io/posts/golang/error-impl/</link><pubDate>Sat, 07 May 2022 20:01:06 +0800</pubDate><guid>https://liuchang0812.github.io/posts/golang/error-impl/</guid><description>Golang error 是一个包含了 Error() string 函数的接口，任何实现了 Error() string 的结构体都可以认为是 error 类型。
// The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error. type error interface { Error() string } 对于简单场景，返回一个带字符串描述的 error 可以通过 return errors.New(&amp;quot;this is a err&amp;quot;) 来实现。其内部实现的机制为：定义了一个 errorString 的结构体，调用 Error() 的时候返回初始化时传入的字符串。
// New returns an error that formats as the given text. // Each call to New returns a distinct error value even if the text is identical.</description></item><item><title>[golang] []byte 和 string 的区别与适用场景</title><link>https://liuchang0812.github.io/posts/golang/byte-slice-vs-string/</link><pubDate>Thu, 03 Mar 2022 10:44:06 +0800</pubDate><guid>https://liuchang0812.github.io/posts/golang/byte-slice-vs-string/</guid><description>[]byte 和 string 有什么区别？类型转换需要拷贝数据吗？如何选择正确的类型？
[]byte和string的类型字义非常类似，[]byte 比 string 多一个 cap 成员。string 在大多数的语言中都表示不可变字符串，[]byte 则是可以修改的数组分片。所以在做 []byte 和 string 转换的时候，如果只是简单的将指针复制，就相当于同一块内存同时有了可变和不可变引用，修改了 []byte 会影响到 string 的不可变性（rust 选手应该比较熟悉）。所以做类型转换时，会额外的有内存申请与数据拷贝动作。
至于在编码的时候该选择哪个类型，可以参考 andybalholm 的回答：尽量使用 string ，除非要频繁修改字符串或者要与使用的接口保持一致。
My advice would be to use string by default when you're working with text. But use []byte instead if one of the following conditions applies: - The mutability of a []byte will significantly reduce the number of allocations needed. - You are dealing with an API that uses []byte, and avoiding a conversion to string will simplify your code.</description></item><item><title>Test Markdown2</title><link>https://liuchang0812.github.io/posts/test2/</link><pubDate>Mon, 08 Nov 2021 11:01:06 +0800</pubDate><guid>https://liuchang0812.github.io/posts/test2/</guid><description>Hello World everyone
#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; int main() { int a, b; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; endl; return 0; } foo bar tar cpp python golang</description></item></channel></rss>