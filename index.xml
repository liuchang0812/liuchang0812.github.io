<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Liu Chang Notes</title><link>https://liuchang0812.github.io/</link><description>Recent content on Liu Chang Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 26 Jun 2022 20:02:45 +0800</lastBuildDate><atom:link href="https://liuchang0812.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Paxos Algorithm Note</title><link>https://liuchang0812.github.io/posts/tech/os/paxos-note/</link><pubDate>Sun, 26 Jun 2022 20:02:45 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/os/paxos-note/</guid><description>学习 PaxosStore 中的 Paxos 实现。</description></item><item><title>Why Does Conv Need a Mutex</title><link>https://liuchang0812.github.io/posts/tech/os/why-conv-need-a-mutex/</link><pubDate>Thu, 23 Jun 2022 17:29:52 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/os/why-conv-need-a-mutex/</guid><description>为什么信号量还需要一个互斥锁保护？</description></item><item><title>2205 读书分享</title><link>https://liuchang0812.github.io/posts/read/2205/</link><pubDate>Sat, 04 Jun 2022 21:22:37 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/2205/</guid><description>介绍 22 年 5 月读的几本书</description></item><item><title>2267. 检查是否有合法括号字符串路径</title><link>https://liuchang0812.github.io/posts/tech/leetcode/2267/</link><pubDate>Wed, 11 May 2022 22:42:51 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/leetcode/2267/</guid><description>记忆化搜索，刚好卡过去 执行用时：1964 ms, 在所有 C++ 提交中击败了 5.08% 的用户 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35</description></item><item><title>2266. 统计打字方案数</title><link>https://liuchang0812.github.io/posts/tech/leetcode/leetcode2266/</link><pubDate>Tue, 10 May 2022 22:21:58 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/leetcode/leetcode2266/</guid><description>爬楼梯的加强版本，分别提前生成三个字母和四个字母的 fib 数组，然后分组统计后相乘。代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>读书笔记 | 尘劫: 知青畅想曲</title><link>https://liuchang0812.github.io/posts/read/chenjie/</link><pubDate>Mon, 09 May 2022 20:06:29 +0800</pubDate><guid>https://liuchang0812.github.io/posts/read/chenjie/</guid><description>一本名字和封面看起来都非常像地摊文学的书，实际上却是“中共党史出版社”出版的关于知青的报告文学，内容包含了大量真实的知青故事，读来让人不禁唏</description></item><item><title>ABOUT</title><link>https://liuchang0812.github.io/about/</link><pubDate>Sat, 07 May 2022 20:01:06 +0800</pubDate><guid>https://liuchang0812.github.io/about/</guid><description>会写点儿 Cpp/Python 的码农，了解一点儿分布式存储系统</description></item><item><title>golang | error 的内部实现</title><link>https://liuchang0812.github.io/posts/tech/golang/error-impl/</link><pubDate>Sat, 07 May 2022 20:01:06 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/golang/error-impl/</guid><description>Golang error 是一个包含了 Error() string 函数的接口，任何实现了 Error() string 的结构体都可以认为是 error 类型。 1 2 3 4 5 // The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error. type error interface { Error()</description></item><item><title>golang | []byte 和 string 的区别与适用场景</title><link>https://liuchang0812.github.io/posts/tech/golang/byte-slice-vs-string/</link><pubDate>Thu, 03 Mar 2022 10:44:06 +0800</pubDate><guid>https://liuchang0812.github.io/posts/tech/golang/byte-slice-vs-string/</guid><description>[]byte 和 string 有什么区别？类型转换需要拷贝数据吗？如何选择正确的类型？ []byte和string的类型字义非常类似，[]byte 比 string 多一个 cap 成员。s</description></item></channel></rss>