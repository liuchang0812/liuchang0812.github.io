<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Cpp on ​Tech and Text Tales</title><link>https://liuchang0812.com/tags/cpp/</link><description>Recent content in Cpp on ​Tech and Text Tales</description><generator>Hugo -- 0.135.0</generator><language>zh-cn</language><lastBuildDate>Thu, 15 Aug 2024 23:34:58 +0800</lastBuildDate><atom:link href="https://liuchang0812.com/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>并发编程中的状态机</title><link>https://liuchang0812.com/posts/tech/leetcode/state-machine-in-concurrency/</link><pubDate>Thu, 15 Aug 2024 23:34:58 +0800</pubDate><guid>https://liuchang0812.com/posts/tech/leetcode/state-machine-in-concurrency/</guid><description>使用状态机思路解决一个并行问题</description></item><item><title>2267. 检查是否有合法括号字符串路径</title><link>https://liuchang0812.com/posts/tech/leetcode/2267/</link><pubDate>Wed, 11 May 2022 22:42:51 +0800</pubDate><guid>https://liuchang0812.com/posts/tech/leetcode/2267/</guid><description>&lt;p>记忆化搜索，刚好卡过去&lt;/p>
&lt;blockquote>
&lt;p>执行用时：1964 ms, 在所有 C++ 提交中击败了 5.08% 的用户&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> mem[&lt;span style="color:#ff0;font-weight:bold">100&lt;/span>][&lt;span style="color:#ff0;font-weight:bold">100&lt;/span>][&lt;span style="color:#ff0;font-weight:bold">100&lt;/span>][&lt;span style="color:#ff0;font-weight:bold">100&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff;font-weight:bold">class&lt;/span> Solution {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff;font-weight:bold">public&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007f7f">// 0 unknow
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007f7f">&lt;/span> &lt;span style="color:#007f7f">// 1 true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007f7f">&lt;/span> &lt;span style="color:#007f7f">// 2 false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007f7f">&lt;/span> &lt;span style="color:#fff;font-weight:bold">bool&lt;/span> dfs(&lt;span style="color:#fff;font-weight:bold">const&lt;/span> vector&amp;lt;vector&amp;lt;&lt;span style="color:#fff;font-weight:bold">char&lt;/span>&amp;gt;&amp;gt;&amp;amp; grid, &lt;span style="color:#fff;font-weight:bold">int&lt;/span> x1, &lt;span style="color:#fff;font-weight:bold">int&lt;/span> y1, &lt;span style="color:#fff;font-weight:bold">int&lt;/span> x2, &lt;span style="color:#fff;font-weight:bold">int&lt;/span> y2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (x1 &amp;gt;= grid.size() || x2 &amp;gt;= grid.size() || y1&amp;gt;=grid[&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>].size() || y2 &amp;lt; &lt;span style="color:#ff0;font-weight:bold">0&lt;/span> || x2 &amp;lt; &lt;span style="color:#ff0;font-weight:bold">0&lt;/span> || x1 &amp;gt; x2 || y1 &amp;gt; y2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> ((x2 - x1 + y2 - y1)%&lt;span style="color:#ff0;font-weight:bold">2&lt;/span>==&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>) &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (mem[x1][y1][x2][y2] != &lt;span style="color:#ff0;font-weight:bold">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> mem[x1][y1][x2][y2] == &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> ( x2 - x1 + y2 - y1 == &lt;span style="color:#ff0;font-weight:bold">1&lt;/span> &amp;amp;&amp;amp; grid[x1][y1] == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;(&amp;#39;&lt;/span> &amp;amp;&amp;amp; grid[x2][y2] == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;)&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mem[x1][y1][x2][y2] = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (grid[x1][y1] == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;(&amp;#39;&lt;/span> &amp;amp;&amp;amp; grid[x2][y2] == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;)&amp;#39;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">bool&lt;/span> tmp = dfs(grid, x1+&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, y1, x2-&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, y2) ||
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(grid, x1+&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, y1, x2, y2-&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>) ||
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(grid, x1, y1+&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, x2-&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, y2) ||
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(grid, x1, y1+&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, x2, y2-&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (tmp) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mem[x1][y1][x2][y2] = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">for&lt;/span> (&lt;span style="color:#fff;font-weight:bold">int&lt;/span> i=x1; i&amp;lt;=x2; ++i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">for&lt;/span> (&lt;span style="color:#fff;font-weight:bold">int&lt;/span> j=y1; j&amp;lt;=y2; ++j) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (i == x1 &amp;amp;&amp;amp; j==y1) &lt;span style="color:#fff;font-weight:bold">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (i == x2 &amp;amp;&amp;amp; j==y2) &lt;span style="color:#fff;font-weight:bold">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> ((dfs(grid, x1, y1, i, j) &amp;amp;&amp;amp; dfs(grid, i, j+&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, x2, y2))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mem[x1][y1][x2][y2] = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (dfs(grid, x1, y1, i, j) &amp;amp;&amp;amp; dfs(grid, i+&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, j, x2, y2)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mem[x1][y1][x2][y2] = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mem[x1][y1][x2][y2] = &lt;span style="color:#ff0;font-weight:bold">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mem[x1][y1][x2][y2] = &lt;span style="color:#ff0;font-weight:bold">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">bool&lt;/span> hasValidPath(vector&amp;lt;vector&amp;lt;&lt;span style="color:#fff;font-weight:bold">char&lt;/span>&amp;gt;&amp;gt;&amp;amp; grid) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> row = grid.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> col = grid[&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>].size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> ((row + col)%&lt;span style="color:#ff0;font-weight:bold">2&lt;/span>==&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>) &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> ( grid[&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>][&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>] == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;)&amp;#39;&lt;/span> || grid[row - &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>][col - &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;(&amp;#39;&lt;/span>) &lt;span style="color:#fff;font-weight:bold">return&lt;/span> &lt;span style="color:#fff;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(mem, &lt;span style="color:#ff0;font-weight:bold">0&lt;/span>, &lt;span style="color:#fff;font-weight:bold">sizeof&lt;/span> mem);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> dfs(grid, &lt;span style="color:#ff0;font-weight:bold">0&lt;/span>, &lt;span style="color:#ff0;font-weight:bold">0&lt;/span>, row-&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>, col -&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>题解里面有一个写法很好，可以学习一下&lt;/p></description></item><item><title>2266. 统计打字方案数</title><link>https://liuchang0812.com/posts/tech/leetcode/leetcode2266/</link><pubDate>Tue, 10 May 2022 22:21:58 +0800</pubDate><guid>https://liuchang0812.com/posts/tech/leetcode/leetcode2266/</guid><description>&lt;p>爬楼梯的加强版本，分别提前生成三个字母和四个字母的 fib 数组，然后分组统计后相乘。代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff;font-weight:bold">class&lt;/span> Solution {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff;font-weight:bold">public&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> countTexts(string pressedKeys) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> f1[&lt;span style="color:#ff0;font-weight:bold">100005&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> f2[&lt;span style="color:#ff0;font-weight:bold">100005&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(f1, &lt;span style="color:#ff0;font-weight:bold">0&lt;/span>, &lt;span style="color:#fff;font-weight:bold">sizeof&lt;/span> f1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(f2, &lt;span style="color:#ff0;font-weight:bold">0&lt;/span>, &lt;span style="color:#fff;font-weight:bold">sizeof&lt;/span> f2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f1[&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>] = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>; f1[&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] = &lt;span style="color:#ff0;font-weight:bold">2&lt;/span>; f1[&lt;span style="color:#ff0;font-weight:bold">2&lt;/span>] = &lt;span style="color:#ff0;font-weight:bold">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f2[&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>] = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>; f2[&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] = &lt;span style="color:#ff0;font-weight:bold">2&lt;/span>; f2[&lt;span style="color:#ff0;font-weight:bold">2&lt;/span>] = &lt;span style="color:#ff0;font-weight:bold">4&lt;/span>; f2[&lt;span style="color:#ff0;font-weight:bold">3&lt;/span>] = &lt;span style="color:#ff0;font-weight:bold">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">for&lt;/span> (&lt;span style="color:#fff;font-weight:bold">int&lt;/span> i=&lt;span style="color:#ff0;font-weight:bold">3&lt;/span>; i&amp;lt;&lt;span style="color:#ff0;font-weight:bold">100005&lt;/span>; ++i) f1[i] = (&lt;span style="color:#ff0;font-weight:bold">0LL&lt;/span> + f1[i-&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] + f1[i-&lt;span style="color:#ff0;font-weight:bold">2&lt;/span>] + f1[i-&lt;span style="color:#ff0;font-weight:bold">3&lt;/span>])%&lt;span style="color:#fff;font-weight:bold">int&lt;/span>(&lt;span style="color:#ff0;font-weight:bold">1e9&lt;/span>+&lt;span style="color:#ff0;font-weight:bold">7&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">for&lt;/span> (&lt;span style="color:#fff;font-weight:bold">int&lt;/span> i=&lt;span style="color:#ff0;font-weight:bold">4&lt;/span>; i&amp;lt;&lt;span style="color:#ff0;font-weight:bold">100005&lt;/span>; ++i) f2[i] = (&lt;span style="color:#ff0;font-weight:bold">0LL&lt;/span> + f2[i-&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] + f2[i-&lt;span style="color:#ff0;font-weight:bold">2&lt;/span>] + f2[i-&lt;span style="color:#ff0;font-weight:bold">3&lt;/span>] + f2[i-&lt;span style="color:#ff0;font-weight:bold">4&lt;/span>])%&lt;span style="color:#fff;font-weight:bold">int&lt;/span>(&lt;span style="color:#ff0;font-weight:bold">1e9&lt;/span>+&lt;span style="color:#ff0;font-weight:bold">7&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> ans = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> cur_ch = pressedKeys[&lt;span style="color:#ff0;font-weight:bold">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">int&lt;/span> cur_cnt = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">for&lt;/span> (&lt;span style="color:#fff;font-weight:bold">int&lt;/span> i=&lt;span style="color:#ff0;font-weight:bold">1&lt;/span>; i&amp;lt;pressedKeys.size(); ++i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (pressedKeys[i] != cur_ch) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (cur_ch == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;7&amp;#39;&lt;/span> || cur_ch == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;9&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = &lt;span style="color:#ff0;font-weight:bold">1LL&lt;/span> *ans * f2[cur_cnt - &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] % &lt;span style="color:#fff;font-weight:bold">int&lt;/span>(&lt;span style="color:#ff0;font-weight:bold">1e9&lt;/span>+&lt;span style="color:#ff0;font-weight:bold">7&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = &lt;span style="color:#ff0;font-weight:bold">1LL&lt;/span> *ans * f1[cur_cnt - &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] % &lt;span style="color:#fff;font-weight:bold">int&lt;/span>(&lt;span style="color:#ff0;font-weight:bold">1e9&lt;/span>+&lt;span style="color:#ff0;font-weight:bold">7&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur_ch = pressedKeys[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur_cnt = &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fff;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ++ cur_cnt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">if&lt;/span> (cur_ch == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;7&amp;#39;&lt;/span> || cur_ch == &lt;span style="color:#0ff;font-weight:bold">&amp;#39;9&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = &lt;span style="color:#ff0;font-weight:bold">1LL&lt;/span> * ans * f2[cur_cnt - &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] % &lt;span style="color:#fff;font-weight:bold">int&lt;/span>(&lt;span style="color:#ff0;font-weight:bold">1e9&lt;/span>+&lt;span style="color:#ff0;font-weight:bold">7&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = &lt;span style="color:#ff0;font-weight:bold">1LL&lt;/span> * ans * f1[cur_cnt - &lt;span style="color:#ff0;font-weight:bold">1&lt;/span>] % &lt;span style="color:#fff;font-weight:bold">int&lt;/span>(&lt;span style="color:#ff0;font-weight:bold">1e9&lt;/span>+&lt;span style="color:#ff0;font-weight:bold">7&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fff;font-weight:bold">return&lt;/span> ans;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>